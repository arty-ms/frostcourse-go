package main

import "log"

type Command string

type Handler interface {
	Run(ctx *Ctx, raw string) error
}

type BaseCommand struct {
	Syntax      string
	SuccessText string
	WarnText    string
	ErrorText   string
}

// StartCommand implements the /start command
type StartCommand struct {
	BaseCommand
	TextPublisher
}

func (c *StartCommand) Run(ctx *Ctx, _ string) error {
	return c.postMessage(ctx, ctx.BotChannelID, "üëã –ì–æ—Ç–æ–≤ —Å–ª–æ–≤–∏—Ç—å —Ç–≤–æ–π –Ω–æ–≤—ã–π –ø–æ—Å—Ç")
}

// PreviewCommand implements the /publish command
type PreviewCommand struct {
	BaseCommand
	TextPublisher
}

func (c *PreviewCommand) Run(ctx *Ctx, message string) error {
	body := extractPayload(message)

	if body == "" {
		return c.postMessage(ctx, ctx.BotChannelID, c.WarnText)
	}

	return c.postMessage(ctx, ctx.BotChannelID, c.SuccessText+body)
}

// PublishCommand implements the /publish command
type PublishCommand struct {
	BaseCommand
	TextPublisher
}

func (c *PublishCommand) Run(ctx *Ctx, message string) error {
	body := extractPayload(message)

	if body == "" {
		return c.postMessage(ctx, ctx.BotChannelID, c.WarnText)
	}

	if err := c.postMessage(ctx, ctx.PubChannelID, body); err != nil {
		_ = c.postMessage(ctx, ctx.BotChannelID, c.ErrorText+err.Error())
	}

	return c.postMessage(ctx, ctx.BotChannelID, c.SuccessText)
}

// PublishWithLinkCommand implements the /publish command
type PublishWithLinkCommand struct {
	BaseCommand
	TextWithMarkupPublisher
}

func (c *PublishWithLinkCommand) Run(ctx *Ctx, message string) error {
	body := extractPayload(message)

	if body == "" {
		return c.postMessage(ctx, ctx.BotChannelID, c.WarnText)
	}

	if err := c.postMessage(ctx, ctx.PubChannelID, body); err != nil {
		log.Printf("Error while publishing with inline button: %s", err)

		return c.postMessage(ctx, ctx.BotChannelID, c.ErrorText+err.Error())
	}

	return c.postMessage(ctx, ctx.BotChannelID, c.SuccessText)
}

const (
	CmdStart                   Command = "start"
	CmdPreview                 Command = "preview"
	CmdPublish                 Command = "publish"
	CmdPublishWithInlineButton Command = "publish_with_inline_button"
)

var commands = map[Command]Handler{
	CmdStart: &StartCommand{
		BaseCommand{Syntax: "/start"},
		TextPublisher{},
	},
	CmdPreview: &PreviewCommand{
		BaseCommand{
			Syntax:      "/preview",
			WarnText:    "‚ö†Ô∏è –ü—Ä–∏—à–ª–∏ `/preview —Ç–µ–∫—Å—Ç`",
			SuccessText: "üîé Preview:\n\n",
		},
		TextPublisher{},
	},
	CmdPublish: &PublishCommand{
		BaseCommand{
			Syntax:      "/publish",
			WarnText:    "‚ö†Ô∏è –ü—Ä–∏—à–ª–∏ `/publish —Ç–µ–∫—Å—Ç`",
			ErrorText:   "‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ",
			SuccessText: "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª",
		},
		TextPublisher{},
	},

	// Temporary fields
	CmdPublishWithInlineButton: &PublishWithLinkCommand{
		BaseCommand{
			Syntax:      "/publish_with_inline_button",
			ErrorText:   "‚ùå Inline Link-a –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
			SuccessText: "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π Inline Link-–æ–π",
		},
		TextWithMarkupPublisher{},
	},
}

func sendForbiddenMessage(ctx *Ctx) error {
	publisher := TextPublisher{Publisher{}}

	return publisher.postMessage(ctx, ctx.BotChannelID, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
}

func sendHelpMessage(ctx *Ctx) error {
	helpText := "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
		"/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
		"/preview <—Ç–µ–∫—Å—Ç> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø–æ—Å—Ç\n" +
		"/publish <—Ç–µ–∫—Å—Ç> - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª" +
		"/publish_with_inline_button <—Ç–µ–∫—Å—Ç> - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª c –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π Inline Link-–æ–π"
	publisher := TextPublisher{Publisher{}}

	return publisher.postMessage(ctx, ctx.BotChannelID, helpText)
}
