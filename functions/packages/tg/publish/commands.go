package main

type Command string

type Handler interface {
	Run(ctx *Ctx, raw string) error
}

type BaseCommand struct {
	Syntax      string
	SuccessText string
	WarnText    string
	ErrorText   string
}

// StartCommand implements the /start command
type StartCommand struct{ BaseCommand }

func (c *StartCommand) Run(ctx *Ctx, _ string) error {
	return sendMessage(ctx.BotChannelID, "üëã –ì–æ—Ç–æ–≤ —Å–ª–æ–≤–∏—Ç—å —Ç–≤–æ–π –Ω–æ–≤—ã–π –ø–æ—Å—Ç")
}

// PreviewCommand implements the /publish command
type PreviewCommand struct{ BaseCommand }

func (c *PreviewCommand) Run(ctx *Ctx, message string) error {
	body := extractPayload(message)

	if body == "" {
		return sendMessage(ctx.BotChannelID, c.WarnText)
	}

	return sendMessage(ctx.BotChannelID, c.SuccessText+body)
}

// PublishCommand implements the /publish command
type PublishCommand struct{ BaseCommand }

func (c *PublishCommand) Run(ctx *Ctx, message string) error {
	body := extractPayload(message)

	if body == "" {
		return sendMessage(ctx.BotChannelID, c.WarnText)
	}

	if err := sendMessageStr(ctx.PubChannelID, body); err != nil {
		_ = sendMessage(ctx.BotChannelID, c.ErrorText+err.Error())
	}

	return sendMessage(ctx.BotChannelID, c.SuccessText)
}

const (
	CmdStart   Command = "start"
	CmdPreview Command = "preview"
	CmdPublish Command = "publish"
)

var commands = map[Command]Handler{
	CmdStart: &StartCommand{BaseCommand{Syntax: "/start"}},
	CmdPreview: &PreviewCommand{BaseCommand{
		Syntax:      "/preview",
		WarnText:    "‚ö†Ô∏è –ü—Ä–∏—à–ª–∏ `/preview —Ç–µ–∫—Å—Ç`",
		SuccessText: "üîé Preview:\n\n",
	}},
	CmdPublish: &PublishCommand{BaseCommand{
		Syntax:      "/publish",
		WarnText:    "‚ö†Ô∏è –ü—Ä–∏—à–ª–∏ `/publish —Ç–µ–∫—Å—Ç`",
		ErrorText:   "‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ",
		SuccessText: "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª",
	}},
}

func sendForbiddenMessage(ctx *Ctx) error {
	return sendMessage(ctx.BotChannelID, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
}

func sendHelpMessage(ctx *Ctx) error {
	helpText := "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
		"/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
		"/preview <—Ç–µ–∫—Å—Ç> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø–æ—Å—Ç\n" +
		"/publish <—Ç–µ–∫—Å—Ç> - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª"

	return sendMessage(ctx.BotChannelID, helpText)
}
